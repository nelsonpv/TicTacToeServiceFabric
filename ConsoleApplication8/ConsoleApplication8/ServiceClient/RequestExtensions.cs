// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.IT.GRM.ServiceClient;
using Microsoft.IT.GRM.ServiceClient.Models;
using Microsoft.Rest;

namespace Microsoft.IT.GRM.ServiceClient
{
    public static partial class RequestExtensions
    {
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IRequest.
        /// </param>
        /// <param name='acceptRequestRequests'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static string AcceptRequests(this IRequest operations, AcceptRequestRequest acceptRequestRequests, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRequest)s).AcceptRequestsAsync(acceptRequestRequests, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IRequest.
        /// </param>
        /// <param name='acceptRequestRequests'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> AcceptRequestsAsync(this IRequest operations, AcceptRequestRequest acceptRequestRequests, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.AcceptRequestsWithOperationResponseAsync(acceptRequestRequests, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IRequest.
        /// </param>
        /// <param name='assignResourceRequest'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static string AssignResource(this IRequest operations, AssignResourceRequest assignResourceRequest, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRequest)s).AssignResourceAsync(assignResourceRequest, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IRequest.
        /// </param>
        /// <param name='assignResourceRequest'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> AssignResourceAsync(this IRequest operations, AssignResourceRequest assignResourceRequest, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.AssignResourceWithOperationResponseAsync(assignResourceRequest, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IRequest.
        /// </param>
        /// <param name='getRequestsRequest'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static string GetRequests(this IRequest operations, GetRequestsRequest getRequestsRequest, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRequest)s).GetRequestsAsync(getRequestsRequest, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IRequest.
        /// </param>
        /// <param name='getRequestsRequest'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetRequestsAsync(this IRequest operations, GetRequestsRequest getRequestsRequest, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetRequestsWithOperationResponseAsync(getRequestsRequest, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
