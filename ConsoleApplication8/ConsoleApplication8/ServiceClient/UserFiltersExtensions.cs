// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.IT.GRM.ServiceClient;
using Microsoft.IT.GRM.ServiceClient.Models;
using Microsoft.Rest;

namespace Microsoft.IT.GRM.ServiceClient
{
    public static partial class UserFiltersExtensions
    {
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='deleteFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static string DeleteFilter(this IUserFilters operations, DeleteUserFilterRequest deleteFilter, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserFilters)s).DeleteFilterAsync(deleteFilter, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='deleteFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> DeleteFilterAsync(this IUserFilters operations, DeleteUserFilterRequest deleteFilter, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.DeleteFilterWithOperationResponseAsync(deleteFilter, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='defaultGetFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static string GetDefaultFilter(this IUserFilters operations, GetDefaultFilterRequest defaultGetFilter, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserFilters)s).GetDefaultFilterAsync(defaultGetFilter, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='defaultGetFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetDefaultFilterAsync(this IUserFilters operations, GetDefaultFilterRequest defaultGetFilter, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetDefaultFilterWithOperationResponseAsync(defaultGetFilter, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='saveFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static SavedFiltersDictionary SaveFilter(this IUserFilters operations, SaveUserFilterRequest saveFilter, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserFilters)s).SaveFilterAsync(saveFilter, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='saveFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SavedFiltersDictionary> SaveFilterAsync(this IUserFilters operations, SaveUserFilterRequest saveFilter, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Microsoft.IT.GRM.ServiceClient.Models.SavedFiltersDictionary> result = await operations.SaveFilterWithOperationResponseAsync(saveFilter, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='defaultFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static string SetFilterAsDefault(this IUserFilters operations, DefaultUserFilterRequest defaultFilter, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserFilters)s).SetFilterAsDefaultAsync(defaultFilter, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='defaultFilter'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> SetFilterAsDefaultAsync(this IUserFilters operations, DefaultUserFilterRequest defaultFilter, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.SetFilterAsDefaultWithOperationResponseAsync(defaultFilter, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='viewFilters'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        public static SavedUserFilter ViewFilters(this IUserFilters operations, ViewUserFilterRequest viewFilters, string trackingId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IUserFilters)s).ViewFiltersAsync(viewFilters, trackingId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the Microsoft.IT.GRM.ServiceClient.IUserFilters.
        /// </param>
        /// <param name='viewFilters'>
        /// Required.
        /// </param>
        /// <param name='trackingId'>
        /// Required. TrackingId (Guid) for Tracing. This will be present in
        /// Response Headers as well.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<SavedUserFilter> ViewFiltersAsync(this IUserFilters operations, ViewUserFilterRequest viewFilters, string trackingId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<Microsoft.IT.GRM.ServiceClient.Models.SavedUserFilter> result = await operations.ViewFiltersWithOperationResponseAsync(viewFilters, trackingId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
